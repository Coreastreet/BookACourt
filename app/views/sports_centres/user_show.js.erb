
var prices = document.querySelectorAll("h3.card-text");
var title = document.querySelector(".title h3");
var image = document.querySelector("img.resize");
var address = document.querySelector(".address");

address.innerText = "<%= @sports_centre.address.full_address %>"

<% if @sports_centre.logo.attached? %>
  //image.src = image_url;
  title.innerText = "<%= @sports_centre.title.html_safe %>";
<% else %>
  var image = document.querySelector("img.resize").src = "";
<% end %>

// creating the array of times
var halfCourtsBooked = new Object();
var availability = [];
<% (6.hours..23.5.hours).step(30.minutes).each do |hour| %>
  availability.push('<%= Time.at(hour).gmtime.strftime("%H:%M") %>');
<% end %>
var counter = 0;
while (counter < availability.length) {
  halfCourtsBooked[availability[counter]] = true;
  counter++;
}

var startTimeInput = document.querySelector(".startTime");
var endTimeInput = document.querySelector(".endTime");
/*
   iterate through all bookings belonging to the same court (can't overlap)
   set time to true i.e. booked, if the time property is within the start and end time of booking
   iterate over another court's bookings
   if another booking is over another time period already set to false, leave it as false
   meaning (at least one court is available for booking).
   Otherwise, leave it as true if the time is within the booking start and endTime.
*/
/* (1..numberOfCourts).each do |number|
  subArray = []
  @bookings.where(court_no: number).each do |booking|
    subArray += calculateTimes(booking)
  end
  @arr.push(subArray)
end
@arr = @arr.
*/

counter = 0;
var counter2;
var bookings = <%= @bookings %>;
console.log(bookings);
var numberOfCourts = <%= @sports_centre.numberOfCourts %>;
//var dateSelected = document.querySelector(".dateHolder").dataset.date;
//var dateSplitArray = dateSelected.toLocaleDateString().split('/');
//var dateFormatted = `${dateSplitArray[2]}-${dateSplitArray[1]}-${dateSplitArray[0]}`;
var dateSelected = <%= @date %>;
console.log(dateSelected);

//console.log(document.querySelector("[data-provide='datepicker'] > input"));

var bookingsByDate = bookings.filter( function(element) { return element.date == dateSelected });
console.log(bookingsByDate);
//console.log(numberOfCourts);

// all moved from controller
var outerArray = [];
var subArray;
var counter4;
var courtCounter = 1;
var bookingsByDateAndCourt;

while (courtCounter <= numberOfCourts) {
  //subArray = [];
  counter4 = 0;
  bookingsByDateAndCourt = bookingsByDate.filter(function(element) {return element.court_no == courtCounter});
  subArray = [];
  while (counter4 < bookingsByDateAndCourt.length) {
    subArray.push(calculateTimes(bookingsByDateAndCourt[counter4]));
    counter4++;
  }
  courtCounter++;
  outerArray.push(subArray.flat());
}
console.log(outerArray);

var arrayBooked = outerArray;
localStorage.setItem("BookingsMatrix", JSON.stringify(arrayBooked));
localStorage.setItem("allBookings", JSON.stringify(bookings));

function calculateTimes(booking) {
  var arrayOfTimes = []
  //var time;
  var start = new Date(booking.startTime.slice(0,-1));
  //var time = start;
  var finish = new Date(booking.endTime.slice(0,-1));
  // var count = 10
  while (start.getTime() != finish.getTime()) {
    //time = start.strftime("%R")
    // time = ;
    //console.log(start);
    // console.log( start, finish);
    arrayOfTimes.push(start.toLocaleTimeString().slice(0,5));
    //return arrayOfTimes
    start = new Date(start.setMinutes( start.getMinutes() + 30));
  //  count--;
  }
  return arrayOfTimes;
}

var counter3;

// console.log(arrayBooked);

// use sets to tell the difference
var set1 = new Set(Object.keys(halfCourtsBooked));
var set2;
var difference;

while (counter < arrayBooked.length) {
  counter2 = 0;
  set2 = new Set(arrayBooked[counter]); // counter
  difference = ([...set1].filter(x => !set2.has(x)));
  //console.log("this is difference:", difference);
  while (counter2 < difference.length) { //counter
    //console.log(arrayBooked[counter]);
      // counter3 = 0;
    halfCourtsBooked[difference[counter2]] = false;
    counter2++;
  }
  counter++;
}

console.log(halfCourtsBooked);


// store the peak hour times in a div above book-now for reference.
var peak_hour_holder = document.querySelector(".peak-hour-holder");
peak_hour_holder.innerHTML = JSON.stringify(<%= @peak_hours %>);
// store the prices in a div for reference in the widget sinces its easier.
var real_price_holder = document.querySelector(".real-price-holder");
real_price_holder.innerHTML = JSON.stringify(<%= @real_prices %>);

//console.log("This is peak-hours", <%= @peak_hours %> );

// on click of new sports_centre, create a new clock

var canvas = document.querySelector("#canvas");
var ctx = canvas.getContext("2d");
var radius = canvas.height / 2;
var now = new Date();
now.setHours(now.getHours() - 10);
//ctx.translate(radius, radius);
radius = radius * 0.80;
//setInterval(drawClock, 1000);
//ctx.moveTo(0, 0);
//drawClock();
/*
if (now.getHours() < 12) {
    drawBookedTimes(ctx, radius, halfCourtsBooked, 'AM');
} else {
    drawBookedTimes(ctx, radius, halfCourtsBooked, 'PM');
}; */

var clearTimeButton = document.querySelector(".clearTime");
clearTimeButton.addEventListener("click", function(event) {

  startTimeInput.setAttribute("data-counter", "");
  startTimeInput.setAttribute("data-interval", "");
  startTimeInput.value = "";
  endTimeInput.value = "";
  drawClock();
  if (now.getHours() < 12) {
      drawBookedTimes(ctx, radius, halfCourtsBooked, 'AM');
  } else {
      drawBookedTimes(ctx, radius, halfCourtsBooked, 'PM');
  };

});
//console.log(hello);

// set click listener on the canvas for the buttons.
// check which tab has been selected; i.e. half-court or full-court

function attachButtonFunctions(event, bookingSchedule) {
  if (event.region == "AM") {
      // alert('You clicked ' + event.region);
      drawBookedTimes(ctx, radius, bookingSchedule, 'AM');
  } else if (event.region == "PM") {
    //  alert('You clicked ' + event.region);
      drawBookedTimes(ctx, radius, bookingSchedule, 'PM');
  }
}

function drawBookedTimes(ctx, radius, bookingSchedule, meridiem) {
  var now = new Date();
  now.setHours(now.getHours() - 10);
  var dateSelectedFormatted = new Date(dateSelected) //.toLocaleDateString();
  var nowDate = now.toLocaleDateString();
  var transparentRed = "rgba(255,0,0,1)";
  var transparentGreen = "rgba(0,128,0,1)";

  var days = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
  var currentDay = days[now.getDay()];
  var sports_centre = JSON.parse('<%= @sports_centre.to_json.html_safe %>');
  var openingHour = sports_centre["opening_hours"][currentDay]["openingHour"];
  var closingHour = sports_centre["opening_hours"][currentDay]["closingHour"];
  var currentTime = now.toTimeString().substring(0,5);
  //console.log(halfCourtsBooked);

  // re
  //var nowDateRearranged = nowDate.split("/");

  //var newDateSelected = dateSelectedFormatted.toLocaleDateString().split("/");
  console.log(nowDate, dateSelectedFormatted.toLocaleDateString());
  if (nowDate == dateSelectedFormatted.toLocaleDateString()) {
    if (now.getMinutes() >= 30) {
      currentTime = currentTime.replace(currentTime.substr(2), ":30");
      // console.log(now.getMinutes());
    } else {
      currentTime = currentTime.replace(currentTime.substr(2), ":00");
    }
  } else { // if not equal, then must be greater
    currentTime = "00:00" // so time will always be greater and all bookings will be shown.
  }
  //console.log(currentTime);
  if (meridiem == 'AM') {
  // iterate over times; if book shade in red an half-hour arc
    drawClock();
    for (const time in bookingSchedule) {
      if ((time < "12:00") && (time > openingHour) && (time >= currentTime)) {
        //console.log(time, openingHour);
        if (bookingSchedule[time] == true) {
          drawHalfHourBooking(ctx, radius, time, transparentRed, bookingSchedule);
        } else {
          drawHalfHourBooking(ctx, radius, time, transparentGreen, bookingSchedule);
        }
        //console.log(time);
      }
    }
  } else {
    drawClock();
    for (const time in bookingSchedule) {
      if (time >= "12:00" && (time < closingHour) && (time >= currentTime)) {
        if (bookingSchedule[time] == true) {
          drawHalfHourBooking(ctx, radius, time, transparentRed, bookingSchedule);
          //console.log("Booked");
        } else {
          drawHalfHourBooking(ctx, radius, time, transparentGreen, bookingSchedule);
        }
      }
    }
  }
}
// draw a red arc for an half-hour booking
function drawHalfHourBooking(ctx, radius, startTime, colour, bookingSchedule) {
    // if '30' exists in time, replace with five, otherwise leave as is
    // then parse string into a decimal to be divided by 0.5 intervals
    var newTime = startTime.replace(':3', ':5').replace(':', '.');
    var interval = parseFloat(newTime);
    var counter = (interval/0.5) - 6;
    var imageData;
  //  var startTimeInput = document.querySelector(".startTime");
  //  var endTimeInput = document.querySelector(".endTime");
    var startTimeInterval;
    var startCounter;

  //  var endTimeData = $(".endTime");
    //console.log(counter);
    ctx.beginPath();
    ctx.arc(0, 0, radius-5, ((2*Math.PI*counter)+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24);
    ctx.strokeStyle = colour;
    ctx.lineWidth = 8;
    ctx.stroke();

    if (colour == "rgba(0,128,0,1)") { // green aka. open for bookings
      ctx.lineTo(0,0);
      ctx.fillStyle = "transparent";
      //ctx.arc(0, 0, radius-20, ((2*Math.PI*counter)+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24);
      //ctx.arc(0, 0, radius/2, ((2*Math.PI*counter)+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24); // repeat the same arc.
      ctx.fill();
      ctx.addHitRegion({ id: `bookableSlot ${startTime}` });
    }
      //console.log("bookableSlot filled");
    //var clicked = false;
    canvas.addEventListener("click", function(event) {

      if(event.region == `bookableSlot ${startTime}`) {
        // get colour on click
          imageData = ctx.getImageData(event.layerX, event.layerY, 1, 1);
        //console.log(Object.values(imageData["data"]));
          if (imageData["data"][0] == 178 && imageData["data"][1] == 255 &&
            imageData["data"][2] == 178 && imageData["data"][3] == 255) { // if time is already selected, deselect...
            /*  ctx.beginPath();
              ctx.arc(0, 0, radius-5, ((2*Math.PI*counter)+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24);
              ctx.lineTo(0,0);
              ctx.fillStyle = "white";
              ctx.fill(); */
              //console.log("Bookable spot: " + startTime);
          } else {
            startCounter = startTimeInput.getAttribute("data-counter");
            if (startCounter.length > 0) {// startTime selected, so draw arc to selected endTime {
              startTimeInterval = startTimeInput.getAttribute("data-interval");
              var intervalHolder = parseInt(startTimeInterval);
              var continuousBooking = true; // booking is continuous
              if (startTimeInterval.substring(2) == ".5") {
                intervalHolder += 0.5;
              }
              var startIntervalHolder = convertTimeIntoString(intervalHolder);
              var stringInterval;
              // intervalHolder is the decimal value of the starting time and interval is the decimal value of the endTime
              while (intervalHolder <= interval) {
                stringInterval = convertTimeIntoString(intervalHolder);
                if (bookingSchedule[stringInterval] == true) {
                  continuousBooking = false;
                  console.log(continuousBooking);
                  break;
                }
                //console.log(bookingSchedule[stringInterval], stringInterval, intervalHolder);
                intervalHolder += 0.5;
                //console.log(startTimeInterval, intervalHolder, interval);
              }
              //console.log(continuousBooking);
              if (continuousBooking == true && (convertTimeIntoString(intervalHolder) > startIntervalHolder)) { // indeed is continuous booking
                // and the second selected period - endTime - is greater than the startTime.
                //console.log(startCounter, counter);
                console.log(convertTimeIntoString(intervalHolder), startIntervalHolder);
                endTimeInput.value = convertTimeIntoString(intervalHolder);
                drawClock();
                ctx.beginPath();
                ctx.arc(0, 0, radius-5, ((2*Math.PI*(startCounter))+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24);
                ctx.strokeStyle = "rgba(0,128,0,1)";
                ctx.lineWidth = 8;
                ctx.stroke();
                ctx.lineTo(0,0);
                ctx.fillStyle = "rgba(0,255,0,0.3)";
                ctx.fill();
              }
              //intervalHolder += 0.5;
            } else { // startTime not selected, so select a startTime
              ctx.beginPath();
              ctx.arc(0, 0, radius-10, ((2*Math.PI*counter)+0.2)/24, ((2*Math.PI*(counter+1))-0.2)/24);
              ctx.lineTo(0,0);
              ctx.fillStyle = "rgba(0,255,0,0.3)";
              ctx.fill();
              startTimeInput.setAttribute("data-counter", counter);
              startTimeInput.setAttribute("data-interval", interval);
              //console.log(ctx.fillStyle);
              startTimeInput.value = startTime;
            }
          }
            //console.log(event.layerX, event.layerY);
      }
    });
}

function convertTimeIntoString(number) {
  var stringTime = number.toString();
  //var minutes = stringTime.substr(1);
  if (Number.isInteger(number)) {
    stringTime = stringTime + ":00";
  } else {
    stringTime = stringTime.replace(".5", ":30");
  }
  if (number < 10) {
    stringTime = "0" + stringTime;
  }
  return stringTime;
}

function drawClock() {
  drawFace(ctx, radius);
  drawNumbers(ctx, radius);
  drawBottomButtons(ctx, radius);
  drawTime(ctx, radius, now);
  //drawTime(ctx, radius);
}

function drawFace(ctx, radius) {
  //var grad;
  ctx.beginPath();
  ctx.arc(0, 0, radius, 0, 2*Math.PI);
  ctx.strokeStyle = "black";
  ctx.fillStyle = 'white';
  ctx.fill();
  ctx.lineWidth = 2;
  ctx.stroke();
  ctx.beginPath();
  ctx.arc(0, 0, radius*0.025, 0, 2*Math.PI);
  ctx.fillStyle = 'black';
  ctx.fill();
}

function drawNumbers(ctx, radius) {
  var ang;
  var num;
  ctx.font = radius*0.15 + "px arial";
  ctx.textBaseline="middle";
  ctx.textAlign="center";
  ctx.fillStyle = 'black';
  for(num = 1; num < 13; num++){
    ang = num * Math.PI / 6;
    ctx.rotate(ang);
    ctx.translate(0, -radius*0.80);
    ctx.rotate(-ang);
    ctx.fillText(num.toString(), 0, 0);
    ctx.rotate(ang);
    ctx.translate(0, radius*0.80);
    ctx.rotate(-ang);
  }
}

function drawHand(ctx, pos, length, width) {
    ctx.beginPath();
    ctx.lineWidth = width;
    ctx.lineCap = "round";
    ctx.moveTo(0,0);
    ctx.rotate(pos);
    ctx.lineTo(0, -length);
    ctx.strokeStyle = "black";
    ctx.stroke();
    ctx.rotate(-pos);
}

function drawTime(ctx, radius, now) {
  var hour = now.getHours();
  var minute = now.getMinutes();

  hour = hour%12;
  hour = (hour*Math.PI/6)+(minute*Math.PI/(6*60));
  drawHand(ctx, hour, radius*0.65, radius*0.03);
  ctx.lineCap = "butt";
}

function drawBottomButtons(ctx, radius) {
  //ctx.moveTo(-radius, radius);
  // draw circle of left side;
  ctx.beginPath();
  ctx.arc(-radius*0.8, radius*1.05, radius * 0.2, 0, 2*Math.PI);
  ctx.strokeStyle = "white";
  ctx.fillStyle = "white";
  ctx.fill();
  ctx.addHitRegion({id: "AM"});
  ctx.lineWidth = 2;
  ctx.stroke();
  //ctx.strokeStyle = "black";
  ctx.fillStyle = "black";
  //ctx.moveTo(0,0);
  ctx.fillText("AM", -radius*0.8, radius*1.05);

  // draw circle of the right side;
  ctx.beginPath();
  ctx.arc(radius*0.8, radius*1.05, radius * 0.2, 0, 2*Math.PI);
  ctx.strokeStyle = "white";
  ctx.fillStyle = "white";
  ctx.fill();
  ctx.addHitRegion({id: "PM"});
  ctx.lineWidth = 2;
  ctx.stroke();
  //ctx.strokeStyle = "black";
  ctx.fillStyle = "black";
  //ctx.moveTo(0,0);
  ctx.fillText("PM", radius*0.8, radius*1.05);

}

// set the prices in data attributes when a sports centre is selected.
var prices = <%= @sports_centre.prices.to_json.html_safe %>
setPrices(prices, "half_court");
setPrices(prices, "full_court");
document.querySelector('.casual').click();

function setPrices(prices, court_type) {
  var casual_prices = Object.values(prices["casual"][court_type]);
  var elements = document.querySelectorAll(`.${court_type} .priceHolder`);
  var regular_prices = Object.values(prices["regular"][court_type]);
  var counter = 0;
  // console.log(`.${court_type} .priceHolder`);
  console.log(prices);
  while (counter < 3) {
    elements[counter].setAttribute("data-casual-price", casual_prices[counter]);
    elements[counter].setAttribute("data-regular-price", regular_prices[counter]);
    counter++;
  }
}

// all the code for the full courts; only needed to generate a boolean array, which will be fed into the same
// drawClock functions defined above.
/*
var fullOuterArray = [];
var fullSubArray;
var fullCounter4;
var fullCourtCounter = 1;
var fullBookingsByDateAndCourt;

while (fullCourtCounter <= numberOfCourts) {
  //subArray = [];
  counter4 = 0;
  bookingsByDateAndCourt = bookingsByDate.filter(function(element) {return element.court_no == courtCounter});
  subArray = [];
  while (counter4 < bookingsByDateAndCourt.length) {
    subArray.push(calculateTimes(bookingsByDateAndCourt[counter4]));
    counter4++;
  }
  courtCounter++;
  outerArray.push(subArray.flat());
} */
console.log("This is the outerArray", outerArray);

//var arrayBooked = outerArray;
/*
function calculateTimes(booking) {
  var arrayOfTimes = []
  //var time;
  var start = new Date(booking.startTime.slice(0,-1));
  //var time = start;
  var finish = new Date(booking.endTime.slice(0,-1));
  // var count = 10
  while (start.getTime() != finish.getTime()) {
    //time = start.strftime("%R")
    // time = ;
    //console.log(start);
    // console.log( start, finish);
    arrayOfTimes.push(start.toLocaleTimeString().slice(0,5));
    //return arrayOfTimes
    start = new Date(start.setMinutes( start.getMinutes() + 30 ));
  //  count--;
  }
  return arrayOfTimes;
}

var counter3;
*/
//console.log(arrayBooked);

// use sets to tell the difference
/* var set1 = new Set(Object.keys(halfCourtsBooked));
var set2;
var difference; */
var fullCourtCounter = 0;
var fullCourtCounter2;
var fullCourtDifference1;
var fullCourtDifference2;
var fullCourtsFree;
var set3;
var fullCourtsBooked = Object.assign({}, halfCourtsBooked);
for (var key in fullCourtsBooked) {
  fullCourtsBooked[key] = true;
}

while (fullCourtCounter < arrayBooked.length) {
  fullCourtCounter2 = 0;
  set2 = new Set(arrayBooked[fullCourtCounter]); // counter
  fullCourtDifference1 = new Set([...set1].filter(x => !set2.has(x))); // difference is an object containing all the unbookedTimes of one court

  set3 = new Set(arrayBooked[fullCourtCounter+1]); // counter
  fullCourtDifference2 = new Set([...set1].filter(x => !set3.has(x))); // all the unbookedTimes of the second half (of the full court)

  fullCourtsFree = ([...fullCourtDifference1].filter(x => fullCourtDifference2.has(x))); // array of times when adjacent half courts are both free; i.e. full court free.

  //console.log("here are when the full courts are free: ", fullCourtsFree);
  while (fullCourtCounter2 < fullCourtsFree.length) { //counter
    //console.log(arrayBooked[counter]);
      // counter3 = 0;
    fullCourtsBooked[fullCourtsFree[fullCourtCounter2]] = false; // set all free times to false; i.e. not booked
    fullCourtCounter2++;
  }
  fullCourtCounter = fullCourtCounter + 2;
}
//console.log("here are all the full court times", fullCourtsBooked);

// set an on click listener on the fullCourt tab in the widget.

var fullCourtTab = document.querySelector("#nav-fullCourt-tab");
fullCourtTab.addEventListener( "click", function() {
  //alert("hello!");
  //drawClock();
  if (now.getHours() < 12) {
      drawBookedTimes(ctx, radius, fullCourtsBooked, 'AM');
      //alert("clicked");
  } else {
      drawBookedTimes(ctx, radius, fullCourtsBooked, 'PM');
      //alert("clicked");
  };
  canvas.addEventListener("click", function(event) {
    attachButtonFunctions(event, fullCourtsBooked);
  });

  //console.log("full court times", fullCourtsBooked);
});

var halfCourtTab = document.querySelector("#nav-halfCourt-tab");
halfCourtTab.addEventListener( "click", function() {
  //alert("hello!");
  //drawClock();
  if (now.getHours() < 12) {
      drawBookedTimes(ctx, radius, halfCourtsBooked, 'AM');
      //alert("clicked");
  } else {
      drawBookedTimes(ctx, radius, halfCourtsBooked, 'PM');
      //alert("clicked");
  };
  canvas.addEventListener("click", function(event) {
    attachButtonFunctions(event, halfCourtsBooked);
  });
  //console.log("full court times", fullCourtsBooked);
});

halfCourtTab.click(); // the default tab open, showing booking times, will be for half courts.
//fix frozen scroll
// solve problem of covered up clock
sportsCentreHolder = document.querySelector("#mainSlideHolder");
sportsCentreHolder.classList.add("container");

// set height of detail Holder to adjacent clock.
detailHolder = document.querySelector("#detailHolder");
clockHolder = document.querySelector("#clockHolder");
detailHolder.setAttribute("height", clockHolder.offsetHeight);
